import { S as SvelteComponentDev, a as init, s as safe_not_equal, e as element, c as claim_element, d as children, g as detach, h as attr, k as add_location, v as listen, l as insert, K as add_render_callback, L as create_in_transition, n as noop, M as onMount, t as text, b as space, f as claim_text, m as append, w as set_data, N as update_keyed_each, O as destroy_block } from './index.0cca822a.js';
import { f as favorites } from './index.aec621c3.js';

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fade(node, { delay = 0, duration = 400 }) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        css: t => `opacity: ${t * o}`
    };
}

/* src\components\WordCard.svelte generated by Svelte v3.9.0 */

const file = "src\\components\\WordCard.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx._id = list[i]._id;
	child_ctx.word = list[i].word;
	child_ctx.clarifyer = list[i].clarifyer;
	child_ctx.index = i;
	return child_ctx;
}

// (48:2) {:else}
function create_else_block(ctx) {
	var div, t0, t1, p0, t2_value = ctx.entry.word + "", t2, t3, p1, t4_value = shrinkClarifyerText(ctx.entry.clarifyer) + "", t4;

	return {
		c: function create() {
			div = element("div");
			t0 = text("+");
			t1 = space();
			p0 = element("p");
			t2 = text(t2_value);
			t3 = space();
			p1 = element("p");
			t4 = text(t4_value);
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			t0 = claim_text(div_nodes, "+");
			div_nodes.forEach(detach);
			t1 = claim_text(nodes, "\r\n    ");

			p0 = claim_element(nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, t2_value);
			p0_nodes.forEach(detach);
			t3 = claim_text(nodes, "\r\n    ");

			p1 = claim_element(nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t4 = claim_text(p1_nodes, t4_value);
			p1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(div, "class", "corner-button svelte-11x0dwt");
			add_location(div, file, 48, 4, 1411);
			attr(p0, "class", "word svelte-11x0dwt");
			add_location(p0, file, 49, 4, 1451);
			attr(p1, "class", "clarifyer svelte-11x0dwt");
			add_location(p1, file, 50, 4, 1489);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			insert(target, t1, anchor);
			insert(target, p0, anchor);
			append(p0, t2);
			insert(target, t3, anchor);
			insert(target, p1, anchor);
			append(p1, t4);
		},

		p: function update(changed, ctx) {
			if ((changed.entry) && t2_value !== (t2_value = ctx.entry.word + "")) {
				set_data(t2, t2_value);
			}

			if ((changed.entry) && t4_value !== (t4_value = shrinkClarifyerText(ctx.entry.clarifyer) + "")) {
				set_data(t4, t4_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
				detach(t1);
				detach(p0);
				detach(t3);
				detach(p1);
			}
		}
	};
}

// (35:2) {#if open}
function create_if_block(ctx) {
	var div0, t0, div0_saved_value, t1, p0, t2_value = ctx.entry.word + "", t2, t3, p1, t4_value = ctx.entry.clarifyer + "", t4, t5, div1, each_blocks = [], each_1_lookup = new Map(), dispose;

	var each_value = ctx.entry.otherWords;

	const get_key = ctx => ctx._id;

	for (var i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c: function create() {
			div0 = element("div");
			t0 = text("★");
			t1 = space();
			p0 = element("p");
			t2 = text(t2_value);
			t3 = space();
			p1 = element("p");
			t4 = text(t4_value);
			t5 = space();
			div1 = element("div");

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].c();
			this.h();
		},

		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true, saved: true }, false);
			var div0_nodes = children(div0);

			t0 = claim_text(div0_nodes, "★");
			div0_nodes.forEach(detach);
			t1 = claim_text(nodes, "\r\n    ");

			p0 = claim_element(nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, t2_value);
			p0_nodes.forEach(detach);
			t3 = claim_text(nodes, "\r\n    ");

			p1 = claim_element(nodes, "P", { class: true, open: true }, false);
			var p1_nodes = children(p1);

			t4 = claim_text(p1_nodes, t4_value);
			p1_nodes.forEach(detach);
			t5 = claim_text(nodes, "\r\n    ");

			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].l(div1_nodes);

			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(div0, "class", "corner-button open svelte-11x0dwt");
			attr(div0, "saved", div0_saved_value = ctx._savedById.includes(ctx.entry._id));
			add_location(div0, file, 35, 4, 920);
			attr(p0, "class", "word svelte-11x0dwt");
			add_location(p0, file, 38, 4, 1068);
			attr(p1, "class", "clarifyer svelte-11x0dwt");
			attr(p1, "open", ctx.open);
			add_location(p1, file, 39, 4, 1106);
			attr(div1, "class", "other-entries svelte-11x0dwt");
			add_location(div1, file, 40, 4, 1161);
			dispose = listen(div0, "click", ctx.click_handler);
		},

		m: function mount(target, anchor) {
			insert(target, div0, anchor);
			append(div0, t0);
			insert(target, t1, anchor);
			insert(target, p0, anchor);
			append(p0, t2);
			insert(target, t3, anchor);
			insert(target, p1, anchor);
			append(p1, t4);
			insert(target, t5, anchor);
			insert(target, div1, anchor);

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].m(div1, null);
		},

		p: function update(changed, ctx) {
			if ((changed._savedById || changed.entry) && div0_saved_value !== (div0_saved_value = ctx._savedById.includes(ctx.entry._id))) {
				attr(div0, "saved", div0_saved_value);
			}

			if ((changed.entry) && t2_value !== (t2_value = ctx.entry.word + "")) {
				set_data(t2, t2_value);
			}

			if ((changed.entry) && t4_value !== (t4_value = ctx.entry.clarifyer + "")) {
				set_data(t4, t4_value);
			}

			if (changed.open) {
				attr(p1, "open", ctx.open);
			}

			const each_value = ctx.entry.otherWords;
			each_blocks = update_keyed_each(each_blocks, changed, get_key, 1, ctx, each_value, each_1_lookup, div1, destroy_block, create_each_block, null, get_each_context);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div0);
				detach(t1);
				detach(p0);
				detach(t3);
				detach(p1);
				detach(t5);
				detach(div1);
			}

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].d();

			dispose();
		}
	};
}

// (42:6) {#each entry.otherWords as {_id, word, clarifyer}
function create_each_block(key_1, ctx) {
	var hr, t0, p0, t1_value = ctx.word + "", t1, t2, p1, t3_value = ctx.clarifyer + "", t3;

	return {
		key: key_1,

		first: null,

		c: function create() {
			hr = element("hr");
			t0 = space();
			p0 = element("p");
			t1 = text(t1_value);
			t2 = space();
			p1 = element("p");
			t3 = text(t3_value);
			this.h();
		},

		l: function claim(nodes) {
			hr = claim_element(nodes, "HR", { class: true }, false);
			var hr_nodes = children(hr);

			hr_nodes.forEach(detach);
			t0 = claim_text(nodes, "\r\n        ");

			p0 = claim_element(nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t1 = claim_text(p0_nodes, t1_value);
			p0_nodes.forEach(detach);
			t2 = claim_text(nodes, "\r\n        ");

			p1 = claim_element(nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t3 = claim_text(p1_nodes, t3_value);
			p1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(hr, "class", "svelte-11x0dwt");
			add_location(hr, file, 42, 8, 1269);
			attr(p0, "class", "word other svelte-11x0dwt");
			add_location(p0, file, 43, 8, 1283);
			attr(p1, "class", "clarifyer other svelte-11x0dwt");
			add_location(p1, file, 44, 8, 1325);
			this.first = hr;
		},

		m: function mount(target, anchor) {
			insert(target, hr, anchor);
			insert(target, t0, anchor);
			insert(target, p0, anchor);
			append(p0, t1);
			insert(target, t2, anchor);
			insert(target, p1, anchor);
			append(p1, t3);
		},

		p: function update(changed, ctx) {
			if ((changed.entry) && t1_value !== (t1_value = ctx.word + "")) {
				set_data(t1, t1_value);
			}

			if ((changed.entry) && t3_value !== (t3_value = ctx.clarifyer + "")) {
				set_data(t3, t3_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(hr);
				detach(t0);
				detach(p0);
				detach(t2);
				detach(p1);
			}
		}
	};
}

function create_fragment(ctx) {
	var div, div_intro, dispose;

	function select_block_type(ctx) {
		if (ctx.open) return create_if_block;
		return create_else_block;
	}

	var current_block_type = select_block_type(ctx);
	var if_block = current_block_type(ctx);

	return {
		c: function create() {
			div = element("div");
			if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, open: true }, false);
			var div_nodes = children(div);

			if_block.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(div, "class", "container svelte-11x0dwt");
			attr(div, "open", ctx.open);
			add_location(div, file, 33, 0, 815);
			dispose = listen(div, "click", ctx.click_handler_1);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},

		p: function update(changed, ctx) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(changed, ctx);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);
				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}

			if (changed.open) {
				attr(div, "open", ctx.open);
			}
		},

		i: function intro(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fade, {duration: 170});
					div_intro.start();
				});
			}
		},

		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}

			if_block.d();
			dispose();
		}
	};
}

function shrinkClarifyerText(text) {
  const firstLine = text.split('\n')[0];
  const newClarifyer = firstLine.substring(0, 30);
  newClarifyer.length > firstLine.length && (newClarifyer += '...');
  return newClarifyer;
}

function instance($$self, $$props, $$invalidate) {
	
  const { savedById, toggleFavorite } = favorites;

  let { entry = {
     word: "Word",
    clarifyer: "clarifyer",
    language: "language",
    otherWords: [],
    lastEdited: "lastEdited",
    _id: '_id'
  }, open = false } = $$props; //boolean
  
  let _savedById = []; //string[]
    onMount(() => savedById.subscribe(val => { const $$result = _savedById = val; $$invalidate('_savedById', _savedById); return $$result; }));

	const writable_props = ['entry', 'open'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<WordCard> was created with unknown prop '${key}'`);
	});

	function click_handler() {
		return toggleFavorite(entry._id);
	}

	function click_handler_1() {
		const $$result = open = true;
		$$invalidate('open', open);
		return $$result;
	}

	$$self.$set = $$props => {
		if ('entry' in $$props) $$invalidate('entry', entry = $$props.entry);
		if ('open' in $$props) $$invalidate('open', open = $$props.open);
	};

	return {
		toggleFavorite,
		entry,
		open,
		_savedById,
		click_handler,
		click_handler_1
	};
}

class WordCard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["entry", "open"]);
	}

	get entry() {
		throw new Error("<WordCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set entry(value) {
		throw new Error("<WordCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get open() {
		throw new Error("<WordCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set open(value) {
		throw new Error("<WordCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { WordCard as W, cubicOut as c };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
