{"code":"import { writable, derived } from 'svelte/store';\r\nimport { language, entries, stocked } from \"./dictionary\";\r\nexport var selectedLetter = writable('');\r\nexport var searchQuery = writable('');\r\nexport function updateSelectedLetter(letter) {\r\n    if (letter === void 0) { letter = ''; }\r\n    selectedLetter.set(letter);\r\n}\r\n;\r\nexport function updateSearchQuery(query) {\r\n    searchQuery.set(query);\r\n}\r\n;\r\nvar SearchResults = /** @class */ (function () {\r\n    function SearchResults(status) {\r\n        this.exactMatch = [];\r\n        this.goodMatch = [];\r\n        this.partMatch = [];\r\n        this.status = status;\r\n    }\r\n    SearchResults.prototype.getAllMatches = function () {\r\n        return this.exactMatch.concat(this.goodMatch, this.partMatch);\r\n    };\r\n    return SearchResults;\r\n}());\r\nexport { SearchResults };\r\nexport var resultsByLetter = derived([language, entries, selectedLetter], function (_a) {\r\n    var $language = _a[0], $entries = _a[1], $selectedLetter = _a[2];\r\n    if ($selectedLetter === '') {\r\n        return [];\r\n    }\r\n    return $entries[$language.selected]\r\n        .filter(function (_a) {\r\n        var word = _a.word;\r\n        return word[0] === $selectedLetter;\r\n    })\r\n        .map(function (entry) { return ({ entry: entry, open: false }); });\r\n});\r\nexport var resultsBySearch = derived([entries, language, stocked, searchQuery], function (_a) {\r\n    var $entries = _a[0], $language = _a[1], $stocked = _a[2], $searchQuery = _a[3];\r\n    var results;\r\n    if ($searchQuery && !$stocked) {\r\n        results = new SearchResults('loading');\r\n    }\r\n    else {\r\n        results = getSearchResults($searchQuery, $entries[$language.selected]);\r\n    }\r\n    return results;\r\n});\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!\r\n// ! Main search algorithm.!\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!\r\nexport var getSearchResults = function (originalQuery, entries) {\r\n    // Gets search results from the dictionary based on the given query.\r\n    // Maps through every entry in the dictonary, determines whether an entry is\r\n    // an exact match, good match, or part match and adds them to returned object.\r\n    // Returns [] if no query, and returns ['loader'] if query but no data\r\n    var query = originalQuery.toLowerCase().trim();\r\n    var results = new SearchResults('results');\r\n    if (!query) {\r\n        results.status = 'missing query';\r\n        return results;\r\n    }\r\n    var exactMatch = results.exactMatch, goodMatch = results.goodMatch, partMatch = results.partMatch;\r\n    // Mapping through all entries and checking entry.word\r\n    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\r\n        var entry = entries_1[_i];\r\n        // Add to results.exactMatch if query === entry.word\r\n        if (entry.word.toLowerCase().trim() === query) {\r\n            exactMatch.push({ entry: entry, open: true });\r\n            continue;\r\n        }\r\n        // If entry.word has multiple phrases, split them and check if any of them\r\n        // equal query, if so add to results.goodMatch\r\n        var phrases = entry.word.split(',');\r\n        for (var _a = 0, phrases_1 = phrases; _a < phrases_1.length; _a++) {\r\n            var phrase = phrases_1[_a];\r\n            if (phrase.toLowerCase().trim() === query) {\r\n                goodMatch.push({ entry: entry, open: true });\r\n                break;\r\n            }\r\n            // Check if any individual words inside each phrase equal query,\r\n            // and add them to results.partMatch if they do\r\n            var words = phrase.split(' ');\r\n            for (var _b = 0, words_1 = words; _b < words_1.length; _b++) {\r\n                var word = words_1[_b];\r\n                if (word.toLowerCase().trim() === query) {\r\n                    partMatch.push({ entry: entry, open: false });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var totalLength = exactMatch.length + goodMatch.length + partMatch.length;\r\n    if (totalLength === 0) {\r\n        results.status = 'no matches';\r\n    }\r\n    return results;\r\n};\r\n","references":["C:/Users/tysis/OneDrive/Documents/GitHub/dictionary/node_modules/svelte/store/index.d.ts","C:/Users/tysis/OneDrive/Documents/GitHub/dictionary/src/store/dictionary.ts"]}
