import { S as SvelteComponentDev, a as init, s as safe_not_equal, e as element, t as text, c as claim_element, d as children, f as claim_text, g as detach, h as attr, k as add_location, l as insert, m as append, n as noop, D as empty, p as mount_component, u as transition_in, v as transition_out, w as destroy_component, b as space, o as listen, N as update_keyed_each, J as check_outros, I as group_outros, T as outro_and_destroy_block } from './index.37edae6e.js';
import { l as lookup } from './index.071b1cc5.js';
import { W as WordCard } from './WordCard.6c176ff1.js';
import { c as connectStore } from './utils.99086a56.js';

/* src\components\icons\SearchIcon.svelte generated by Svelte v3.9.0 */

const file = "src\\components\\icons\\SearchIcon.svelte";

function create_fragment(ctx) {
	var div, t;

	return {
		c: function create() {
			div = element("div");
			t = text("⚲");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			t = claim_text(div_nodes, "⚲");
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(div, "class", "search-icon svelte-19kiufp");
			add_location(div, file, 13, 0, 274);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

class SearchIcon extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

/* src\routes\search.svelte generated by Svelte v3.9.0 */

const file$1 = "src\\routes\\search.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.entry = list[i].entry;
	child_ctx.open = list[i].open;
	child_ctx.index = i;
	return child_ctx;
}

// (27:0) {#each _resultsBySearch.getAllMatches() as {entry, open}
function create_each_block(key_1, ctx) {
	var first, current;

	var wordcard = new WordCard({
		props: { open: ctx.open, entry: ctx.entry },
		$$inline: true
	});

	return {
		key: key_1,

		first: null,

		c: function create() {
			first = empty();
			wordcard.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			first = empty();
			wordcard.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			this.first = first;
		},

		m: function mount(target, anchor) {
			insert(target, first, anchor);
			mount_component(wordcard, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var wordcard_changes = {};
			if (changed._resultsBySearch) wordcard_changes.open = ctx.open;
			if (changed._resultsBySearch) wordcard_changes.entry = ctx.entry;
			wordcard.$set(wordcard_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(wordcard.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(wordcard.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(first);
			}

			destroy_component(wordcard, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	var t0, div1, input, t1, div0, t2, each_blocks = [], each_1_lookup = new Map(), each_1_anchor, current, dispose;

	var searchicon = new SearchIcon({ $$inline: true });

	var each_value = ctx._resultsBySearch.getAllMatches();

	const get_key = ctx => ctx.entry._id;

	for (var i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c: function create() {
			t0 = space();
			div1 = element("div");
			input = element("input");
			t1 = space();
			div0 = element("div");
			searchicon.$$.fragment.c();
			t2 = space();

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].c();

			each_1_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\r\n\r\n\r\n\r\n\r\n\r\n");

			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			input = claim_element(div1_nodes, "INPUT", { type: true, value: true, class: true }, false);
			var input_nodes = children(input);

			input_nodes.forEach(detach);
			t1 = claim_text(div1_nodes, "\r\n  ");

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			searchicon.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t2 = claim_text(nodes, "\r\n\r\n");

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].l(nodes);

			each_1_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			document.title = "Search";
			attr(input, "type", "text");
			input.value = ctx._searchQuery;
			attr(input, "class", "svelte-1s8v1c4");
			add_location(input, file$1, 22, 2, 694);
			attr(div0, "class", "svelte-1s8v1c4");
			add_location(div0, file$1, 23, 2, 762);
			attr(div1, "class", "search-bar svelte-1s8v1c4");
			add_location(div1, file$1, 21, 0, 666);
			dispose = listen(input, "input", ctx.handleInput);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, input);
			append(div1, t1);
			append(div1, div0);
			mount_component(searchicon, div0, null);
			insert(target, t2, anchor);

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].m(target, anchor);

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (!current || changed._searchQuery) {
				input.value = ctx._searchQuery;
			}

			const each_value = ctx._resultsBySearch.getAllMatches();

			group_outros();
			each_blocks = update_keyed_each(each_blocks, changed, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
			check_outros();
		},

		i: function intro(local) {
			if (current) return;
			transition_in(searchicon.$$.fragment, local);

			for (var i = 0; i < each_value.length; i += 1) transition_in(each_blocks[i]);

			current = true;
		},

		o: function outro(local) {
			transition_out(searchicon.$$.fragment, local);

			for (i = 0; i < each_blocks.length; i += 1) transition_out(each_blocks[i]);

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(div1);
			}

			destroy_component(searchicon);

			if (detaching) {
				detach(t2);
			}

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].d(detaching);

			if (detaching) {
				detach(each_1_anchor);
			}

			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
  const { searchQuery, resultsBySearch, updateSearchQuery } = lookup;
  const handleInput = ({ target }) => updateSearchQuery(target.value);

  let _searchQuery = ''; 
    onMount(() => searchQuery.subscribe(val => { const $$result = _searchQuery = val; $$invalidate('_searchQuery', _searchQuery); return $$result; }));
  let _resultsBySearch = {getAllMatches() { return [] }}; connectStore(_resultsBySearch, val => { const $$result = _resultsBySearch = val; $$invalidate('_resultsBySearch', _resultsBySearch); return $$result; });

	return {
		handleInput,
		_searchQuery,
		_resultsBySearch
	};
}

class Search extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment$1, safe_not_equal, []);
	}
}

export default Search;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLjRjODA2Yzk1LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3NlYXJjaC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHN2ZWx0ZTpoZWFkPlxyXG5cdDx0aXRsZT5TZWFyY2g8L3RpdGxlPlxyXG48L3N2ZWx0ZTpoZWFkPlxyXG5cclxuPHNjcmlwdD5cclxuICBpbXBvcnQgU2VhcmNoSWNvbiBmcm9tICcuLi9jb21wb25lbnRzL2ljb25zL1NlYXJjaEljb24uc3ZlbHRlJztcclxuICBpbXBvcnQgV29yZENhcmQgZnJvbSAnLi4vY29tcG9uZW50cy9Xb3JkQ2FyZC5zdmVsdGUnO1xyXG4gIGltcG9ydCB7Y29ubmVjdFN0b3JlfSBmcm9tICcuLi9zdG9yZS91dGlscyc7XHJcblxyXG4gIGltcG9ydCB7IGxvb2t1cCB9IGZyb20gJy4uL3N0b3JlJztcclxuICBjb25zdCB7IHNlYXJjaFF1ZXJ5LCByZXN1bHRzQnlTZWFyY2gsIHVwZGF0ZVNlYXJjaFF1ZXJ5IH0gPSBsb29rdXA7XHJcbiAgY29uc3QgaGFuZGxlSW5wdXQgPSAoeyB0YXJnZXQgfSkgPT4gdXBkYXRlU2VhcmNoUXVlcnkodGFyZ2V0LnZhbHVlKTtcclxuXHJcbiAgbGV0IF9zZWFyY2hRdWVyeSA9ICcnOyBcclxuICAgIG9uTW91bnQoKCkgPT4gc2VhcmNoUXVlcnkuc3Vic2NyaWJlKHZhbCA9PiBfc2VhcmNoUXVlcnkgPSB2YWwpKTtcclxuICBsZXQgX3Jlc3VsdHNCeVNlYXJjaCA9IHtnZXRBbGxNYXRjaGVzKCkgeyByZXR1cm4gW10gfX07IGNvbm5lY3RTdG9yZShfcmVzdWx0c0J5U2VhcmNoLCB2YWwgPT4gX3Jlc3VsdHNCeVNlYXJjaCA9IHZhbCk7XHJcbiAgICBcclxuPC9zY3JpcHQ+XHJcblxyXG5cclxuXHJcbjxkaXYgY2xhc3M9XCJzZWFyY2gtYmFyXCI+XHJcbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgb246aW5wdXQ9e2hhbmRsZUlucHV0fSB2YWx1ZT17X3NlYXJjaFF1ZXJ5fS8+XHJcbiAgPGRpdj48U2VhcmNoSWNvbi8+PC9kaXY+XHJcbjwvZGl2PlxyXG5cclxueyNlYWNoIF9yZXN1bHRzQnlTZWFyY2guZ2V0QWxsTWF0Y2hlcygpIGFzIHtlbnRyeSwgb3Blbn0sIGluZGV4IChlbnRyeS5faWQpfVxyXG4gIDxXb3JkQ2FyZCB7b3Blbn0ge2VudHJ5fS8+XHJcbnsvZWFjaH1cclxuXHJcblxyXG5cclxuPHN0eWxlPlxyXG4gIC5zZWFyY2gtYmFyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICB3aWR0aDogNDM1cHg7XHJcbiAgICBoZWlnaHQ6IDQ0cHg7XHJcbiAgICBtYXJnaW46IC01cHggMCAxNXB4IDA7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjZGRkO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNDBweDtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgfVxyXG5cclxuICAuc2VhcmNoLWJhciA+IGlucHV0IHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgcGFkZGluZzogNXB4O1xyXG4gICAgb3V0bGluZTogbm9uZTtcclxuICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIHBhZGRpbmctbGVmdDogMThweDtcclxuICB9XHJcblxyXG4gIC5zZWFyY2gtYmFyID4gZGl2IHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBtYXJnaW46IC0xNHB4IDZweCBhdXRvIGF1dG87XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBiYWNrZ3JvdW5kOiBwaW5rO1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDU1MHB4KSB7XHJcbiAgICAuc2VhcmNoLWJhciB7XHJcbiAgICAgIHdpZHRoOiBjYWxjKDEwMHZ3IC0gNDBweCk7XHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQkEyQmEsSUFBSSxhQUFHLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2REFBWixJQUFJOzhEQUFHLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBRGxCLGdCQUFnQixDQUFDLGFBQWEsRUFBRTs7NEJBQTBCLEtBQUssQ0FBQyxHQUFHOztnQ0FBeEU7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQUFBOzs7Ozs7Ozs7cUJBSmlELFlBQVk7Ozs7Ozs7d0NBQWhDLFdBQVc7Ozs7Ozs7Ozs7OzsrQkFJeEM7Ozs7Ozs7O3NCQUppRCxZQUFZOzs7MEJBSXhELGdCQUFnQixDQUFDLGFBQWEsRUFBRTs7Ozs7Ozs7Ozs7a0NBQXJDOzs7Ozs7OzsrQkFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBQUE7Ozs7Ozs7Ozs7Ozs7RUFoQkEsTUFBTSxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxNQUFNLENBQUM7RUFDbkUsTUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7RUFFcEUsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLE9BQU8sQ0FBQyxNQUFNLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyx1QkFBSSxZQUFZLEdBQUcsbUVBQUcsQ0FBQyxDQUFDLENBQUM7RUFDbEUsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLGFBQWEsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLHVCQUFJLGdCQUFnQixHQUFHLDJFQUFHLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
