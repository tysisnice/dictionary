import { S as SvelteComponentDev, i as init, s as safe_not_equal, e as element, t as text, c as claim_element, b as children, d as claim_text, f as detach, g as attr, h as add_location, j as insert, k as append, l as noop, B as empty, o as mount_component, q as transition_in, r as transition_out, u as destroy_component, a as space, m as listen, M as update_keyed_each, H as check_outros, v as validate_store, w as component_subscribe, G as group_outros, R as outro_and_destroy_block } from './index.ec4d4981.js';
import { l as lookup } from './index.7445f01c.js';
import { W as WordCard } from './WordCard.8d136ae8.js';

/* src\components\icons\SearchIcon.svelte generated by Svelte v3.9.0 */

const file = "src\\components\\icons\\SearchIcon.svelte";

function create_fragment(ctx) {
	var div, t;

	return {
		c: function create() {
			div = element("div");
			t = text("⚲");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			t = claim_text(div_nodes, "⚲");
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(div, "class", "search-icon svelte-19kiufp");
			add_location(div, file, 13, 0, 274);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

class SearchIcon extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

/* src\routes\search\index.svelte generated by Svelte v3.9.0 */

const file$1 = "src\\routes\\search\\index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.entry = list[i].entry;
	child_ctx.open = list[i].open;
	child_ctx.index = i;
	return child_ctx;
}

// (19:0) {#each $resultsBySearch.getAllMatches() as {entry, open}
function create_each_block(key_1, ctx) {
	var first, current;

	var wordcard = new WordCard({
		props: { open: ctx.open, entry: ctx.entry },
		$$inline: true
	});

	return {
		key: key_1,

		first: null,

		c: function create() {
			first = empty();
			wordcard.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			first = empty();
			wordcard.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			this.first = first;
		},

		m: function mount(target, anchor) {
			insert(target, first, anchor);
			mount_component(wordcard, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var wordcard_changes = {};
			if (changed.$resultsBySearch) wordcard_changes.open = ctx.open;
			if (changed.$resultsBySearch) wordcard_changes.entry = ctx.entry;
			wordcard.$set(wordcard_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(wordcard.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(wordcard.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(first);
			}

			destroy_component(wordcard, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	var t0, div1, input, t1, div0, t2, each_blocks = [], each_1_lookup = new Map(), each_1_anchor, current, dispose;

	var searchicon = new SearchIcon({ $$inline: true });

	var each_value = ctx.$resultsBySearch.getAllMatches();

	const get_key = ctx => ctx.entry._id;

	for (var i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c: function create() {
			t0 = space();
			div1 = element("div");
			input = element("input");
			t1 = space();
			div0 = element("div");
			searchicon.$$.fragment.c();
			t2 = space();

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].c();

			each_1_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\r\n\r\n\r\n\r\n");

			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			input = claim_element(div1_nodes, "INPUT", { type: true, value: true, class: true }, false);
			var input_nodes = children(input);

			input_nodes.forEach(detach);
			t1 = claim_text(div1_nodes, "\r\n  ");

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			searchicon.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t2 = claim_text(nodes, "\r\n\r\n");

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].l(nodes);

			each_1_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			document.title = "Search";
			attr(input, "type", "text");
			input.value = ctx.$searchQuery;
			attr(input, "class", "svelte-1s8v1c4");
			add_location(input, file$1, 14, 2, 426);
			attr(div0, "class", "svelte-1s8v1c4");
			add_location(div0, file$1, 15, 2, 494);
			attr(div1, "class", "search-bar svelte-1s8v1c4");
			add_location(div1, file$1, 13, 0, 398);
			dispose = listen(input, "input", ctx.handleInput);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, input);
			append(div1, t1);
			append(div1, div0);
			mount_component(searchicon, div0, null);
			insert(target, t2, anchor);

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].m(target, anchor);

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (!current || changed.$searchQuery) {
				input.value = ctx.$searchQuery;
			}

			const each_value = ctx.$resultsBySearch.getAllMatches();

			group_outros();
			each_blocks = update_keyed_each(each_blocks, changed, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
			check_outros();
		},

		i: function intro(local) {
			if (current) return;
			transition_in(searchicon.$$.fragment, local);

			for (var i = 0; i < each_value.length; i += 1) transition_in(each_blocks[i]);

			current = true;
		},

		o: function outro(local) {
			transition_out(searchicon.$$.fragment, local);

			for (i = 0; i < each_blocks.length; i += 1) transition_out(each_blocks[i]);

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(div1);
			}

			destroy_component(searchicon);

			if (detaching) {
				detach(t2);
			}

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].d(detaching);

			if (detaching) {
				detach(each_1_anchor);
			}

			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $searchQuery, $resultsBySearch;

	
  
  const { searchQuery, resultsBySearch, updateSearchQuery } = lookup; validate_store(searchQuery, 'searchQuery'); component_subscribe($$self, searchQuery, $$value => { $searchQuery = $$value; $$invalidate('$searchQuery', $searchQuery); }); validate_store(resultsBySearch, 'resultsBySearch'); component_subscribe($$self, resultsBySearch, $$value => { $resultsBySearch = $$value; $$invalidate('$resultsBySearch', $resultsBySearch); });
  const handleInput = ({ target }) => updateSearchQuery(target.value);

	return {
		searchQuery,
		resultsBySearch,
		handleInput,
		$searchQuery,
		$resultsBySearch
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment$1, safe_not_equal, []);
	}
}

export default Index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMjBmYzRjNzEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvc2VhcmNoL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3ZlbHRlOmhlYWQ+XHJcblx0PHRpdGxlPlNlYXJjaDwvdGl0bGU+XHJcbjwvc3ZlbHRlOmhlYWQ+XHJcblxyXG48c2NyaXB0PlxyXG4gIGltcG9ydCBTZWFyY2hJY29uIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvaWNvbnMvU2VhcmNoSWNvbi5zdmVsdGUnO1xyXG4gIGltcG9ydCBXb3JkQ2FyZCBmcm9tICcuLi8uLi9jb21wb25lbnRzL1dvcmRDYXJkLnN2ZWx0ZSc7XHJcbiAgaW1wb3J0IHsgbG9va3VwIH0gZnJvbSAnLi4vLi4vc3RvcmUnO1xyXG4gIFxyXG4gIGNvbnN0IHsgc2VhcmNoUXVlcnksIHJlc3VsdHNCeVNlYXJjaCwgdXBkYXRlU2VhcmNoUXVlcnkgfSA9IGxvb2t1cDtcclxuICBjb25zdCBoYW5kbGVJbnB1dCA9ICh7IHRhcmdldCB9KSA9PiB1cGRhdGVTZWFyY2hRdWVyeSh0YXJnZXQudmFsdWUpO1xyXG48L3NjcmlwdD5cclxuXHJcbjxkaXYgY2xhc3M9XCJzZWFyY2gtYmFyXCI+XHJcbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgb246aW5wdXQ9e2hhbmRsZUlucHV0fSB2YWx1ZT17JHNlYXJjaFF1ZXJ5fS8+XHJcbiAgPGRpdj48U2VhcmNoSWNvbi8+PC9kaXY+XHJcbjwvZGl2PlxyXG5cclxueyNlYWNoICRyZXN1bHRzQnlTZWFyY2guZ2V0QWxsTWF0Y2hlcygpIGFzIHtlbnRyeSwgb3Blbn0sIGluZGV4IChlbnRyeS5faWQpfVxyXG4gIDxXb3JkQ2FyZCB7b3Blbn0ge2VudHJ5fS8+XHJcbnsvZWFjaH1cclxuXHJcblxyXG48c3R5bGU+XHJcbiAgLnNlYXJjaC1iYXIge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgIHdpZHRoOiA0MzVweDtcclxuICAgIGhlaWdodDogNDRweDtcclxuICAgIG1hcmdpbjogLTVweCAwIDE1cHggMDtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNkZGQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0MHB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICB9XHJcblxyXG4gIC5zZWFyY2gtYmFyID4gaW5wdXQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBwYWRkaW5nOiA1cHg7XHJcbiAgICBvdXRsaW5lOiBub25lO1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxOHB4O1xyXG4gIH1cclxuXHJcbiAgLnNlYXJjaC1iYXIgPiBkaXYge1xyXG4gICAgZm9udC1zaXplOiA0MHB4O1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIG1hcmdpbjogLTE0cHggNnB4IGF1dG8gYXV0bztcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJhY2tncm91bmQ6IHBpbms7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgKG1heC13aWR0aDogNTUwcHgpIHtcclxuICAgIC5zZWFyY2gtYmFyIHtcclxuICAgICAgd2lkdGg6IGNhbGMoMTAwdncgLSA0MHB4KTtcclxuICAgIH1cclxuICB9XHJcbjwvc3R5bGU+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBbUJhLElBQUksYUFBRyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkRBQVosSUFBSTs4REFBRyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NCQURsQixnQkFBZ0IsQ0FBQyxhQUFhLEVBQUU7OzRCQUEwQixLQUFLLENBQUMsR0FBRzs7Z0NBQXhFOzs7Ozs7Ozs7Ozs7Ozs7OytCQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFBQTs7Ozs7Ozs7O3FCQUppRCxZQUFZOzs7Ozs7O3dDQUFoQyxXQUFXOzs7Ozs7Ozs7Ozs7K0JBSXhDOzs7Ozs7OztzQkFKaUQsWUFBWTs7OzBCQUl4RCxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUU7Ozs7Ozs7Ozs7O2tDQUFyQzs7Ozs7Ozs7K0JBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBVEEsTUFBTSxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxrWEFBTSxDQUFDO0VBQ25FLE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
