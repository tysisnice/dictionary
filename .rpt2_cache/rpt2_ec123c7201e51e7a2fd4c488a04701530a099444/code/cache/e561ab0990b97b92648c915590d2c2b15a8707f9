{"code":"// TODO: Change this file and the dictionary data for each new project\r\nimport { WordEntry, IAlphabet } from \"./dictionary\";\r\nvar fetch2; // ! trying to make a workaround for fetch on server\r\nif (typeof window === 'undefined') {\r\n    fetch2 = require && require('node-fetch');\r\n}\r\nelse {\r\n    fetch2 = window.fetch;\r\n}\r\n// TODO: change data files and the path to their dir. choose what to do with the data\r\nvar PATH_TO_DATA = 'assets/dictionary-data/'; // todo change path to the data\r\nconsole.log(PATH_TO_DATA);\r\nvar fetchDictionary = function (callback) {\r\n    var firstText = \"\";\r\n    var secondText = \"\";\r\n    var thirdText = \"\";\r\n    var fourthText = \"\";\r\n    fetch2(PATH_TO_DATA + 'primary-1.txt')\r\n        .then(function (firstData) {\r\n        return firstData.text().then(function (firstText) {\r\n            fetch2(PATH_TO_DATA + 'primary-2.txt')\r\n                .then(function (secondData) {\r\n                return secondData.text().then(function (secondText) {\r\n                    fetch2(PATH_TO_DATA + 'secondary-1.txt')\r\n                        .then(function (thirdData) {\r\n                        return thirdData.text().then(function (thirdText) {\r\n                            fetch2(PATH_TO_DATA + 'secondary2.txt')\r\n                                .then(function (fourthData) {\r\n                                return fourthData.text().then(function (fourthText) {\r\n                                    // TODO change what to do with the data \r\n                                    var processedData = processData(firstText, secondText, thirdText, fourthText);\r\n                                    callback(processedData);\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n};\r\n// ! workaround for now so fetch doesnt get called on the server and cause errors\r\nif (typeof window === 'undefined') {\r\n    fetchDictionary = function (callback) { return callback({}); };\r\n}\r\nexport default fetchDictionary;\r\nexport var customInitDictionaryData = {\r\n    wordLists: {\r\n        first: { words: [], definers: [] },\r\n        second: { words: [], definers: [] },\r\n    },\r\n};\r\n// * the actual function\r\nfunction processData(first, second, third, fourth) {\r\n    function wordsAndDefiners(s) {\r\n        var str = s\r\n            .split('=').join(' = ')\r\n            .split('\\n');\r\n        var words = [];\r\n        var definers = str.map(function (item) {\r\n            var part = item.split(';');\r\n            if (part[1]) {\r\n                var word_1 = [];\r\n                var definer = [];\r\n                var separated = [];\r\n                for (var i = 0; i < part.length; i++) {\r\n                    if ((part[i + 1] && part[i].split('(')[1])\r\n                        && part[i].split('(').reverse()[0].split(')')[1] === undefined) {\r\n                        part[i + 1] = part[i] + '\\n' + part[i + 1];\r\n                    }\r\n                    else {\r\n                        separated.push(part[i]);\r\n                    }\r\n                }\r\n                var cla = separated.map(function (x) {\r\n                    // console.log(x)\r\n                    var y = x.split('(');\r\n                    word_1.push((y.shift() || '').trim());\r\n                    return y.map(function (x2, index) {\r\n                        return (x2 && x2.split(')').join((index === y.length - 1) ? '' : '\\n'));\r\n                    }).join('').trim();\r\n                });\r\n                definer.push(Array.isArray(cla) ? cla : [cla]);\r\n                words.push(Array.isArray(word_1) ? word_1 : [word_1]);\r\n                return cla;\r\n            }\r\n            var ite = item.split('(');\r\n            var w = (ite.shift() || '').trim()\r\n                .replace(')', '')\r\n                .replace('(', '')\r\n                .replace(' = ', ', ');\r\n            words.push(Array.isArray(w) ? w : [w]);\r\n            var d = ite.map(function (x, index) {\r\n                return (x && x.split(')').join((index === ite.length - 1) ? '' : '\\n'));\r\n            }).join('').trim();\r\n            return Array.isArray(d) ? d : [d];\r\n        });\r\n        return { words: words, definers: definers };\r\n    }\r\n    var primaryWordsDefiners1 = wordsAndDefiners(first);\r\n    var primaryWordsDefiners2 = wordsAndDefiners(second);\r\n    var secondaryWordsDefiners1 = wordsAndDefiners(third);\r\n    var secondaryWordsDefiners2 = wordsAndDefiners(fourth);\r\n    function addEntries(mainLang, otherLang, langId) {\r\n        var list = [];\r\n        mainLang.words.forEach(function (val1, i1) {\r\n            val1.forEach(function (word, i2) {\r\n                var clarifyer = mainLang.definers[i1][i2];\r\n                var _id = langId + '-' + i1 + '-' + i2;\r\n                var language = langId === 1 ? 'primary' : 'secondary';\r\n                var entry = new WordEntry({ word: word, clarifyer: clarifyer, _id: _id, language: language });\r\n                otherLang.words[i1].forEach(function (val3) {\r\n                    entry.addOtherWord(new WordEntry({ word: val3, clarifyer: otherLang.definers[i1][i2] }));\r\n                });\r\n                list.push(entry);\r\n            });\r\n        });\r\n        return list.sort(function (a, b) {\r\n            if (a.word < b.word) {\r\n                return -1;\r\n            }\r\n            if (a.word > b.word) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    var primary = addEntries(primaryWordsDefiners1, primaryWordsDefiners2, 2);\r\n    var secondary = addEntries(secondaryWordsDefiners1, secondaryWordsDefiners2, 1);\r\n    return {\r\n        entries: { primary: primary, secondary: secondary },\r\n        language: { primary: 'english', secondary: 'mien', selected: 'primary' },\r\n        alphabet: new IAlphabet(),\r\n        stocked: true,\r\n    };\r\n}\r\n","references":["C:/Users/tysis/OneDrive/Documents/GitHub/dictionary/src/store/dictionary.ts","C:/Users/tysis/OneDrive/Documents/GitHub/dictionary/src/store/dictionary.ts","C:/Users/tysis/OneDrive/Documents/GitHub/dictionary/node_modules/node-fetch/lib/index.js"]}
