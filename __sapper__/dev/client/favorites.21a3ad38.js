import { i as is_function, S as SvelteComponentDev, a as init, s as safe_not_equal, e as element, b as space, c as claim_element, d as children, f as claim_text, g as detach, j as add_location, k as insert, m as mount_component, l as append, P as fix_position, Q as create_animation, o as transition_in, p as transition_out, q as destroy_component, t as text, D as empty, h as attr, N as update_keyed_each, J as check_outros, M as onMount, n as noop, I as group_outros, R as fix_and_outro_and_destroy_block } from './index.42697b0b.js';
import { f as favorites } from './index.740af30a.js';
import { c as cubicOut, W as WordCard } from './WordCard.10d51910.js';

function flip(node, animation, params) {
    const style = getComputedStyle(node);
    const transform = style.transform === 'none' ? '' : style.transform;
    const dx = animation.from.left - animation.to.left;
    const dy = animation.from.top - animation.to.top;
    const d = Math.sqrt(dx * dx + dy * dy);
    const { delay = 0, duration = d => Math.sqrt(d) * 120, easing = cubicOut } = params;
    return {
        delay,
        duration: is_function(duration) ? duration(d) : duration,
        easing,
        css: (_t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
    };
}

/* src\routes\favorites.svelte generated by Svelte v3.9.0 */

const file = "src\\routes\\favorites.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.entry = list[i];
	child_ctx.i = i;
	return child_ctx;
}

// (24:0) {#each _savedWords as entry, i (entry._id)}
function create_each_block(key_1, ctx) {
	var div, t, rect, stop_animation = noop, current;

	var wordcard = new WordCard({
		props: { entry: ctx.entry },
		$$inline: true
	});

	return {
		key: key_1,

		first: null,

		c: function create() {
			div = element("div");
			wordcard.$$.fragment.c();
			t = space();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {}, false);
			var div_nodes = children(div);

			wordcard.$$.fragment.l(div_nodes);
			t = claim_text(div_nodes, "\r\n  ");
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(div, file, 24, 2, 740);
			this.first = div;
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			mount_component(wordcard, div, null);
			append(div, t);
			current = true;
		},

		p: function update(changed, ctx) {
			var wordcard_changes = {};
			if (changed._savedWords) wordcard_changes.entry = ctx.entry;
			wordcard.$set(wordcard_changes);
		},

		r: function measure_1() {
			rect = div.getBoundingClientRect();
		},

		f: function fix() {
			fix_position(div);
			stop_animation();
		},

		a: function animate() {
			stop_animation();
			stop_animation = create_animation(div, rect, flip, {duration: 220});
		},

		i: function intro(local) {
			if (current) return;
			transition_in(wordcard.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(wordcard.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_component(wordcard);
		}
	};
}

function create_fragment(ctx) {
	var t0, h20, t1, t2, t3, h21, t4, t5, each_blocks = [], each_1_lookup = new Map(), each_1_anchor, current;

	var wordcard = new WordCard({
		props: { entry: ctx._wordOfTheDay, open: "true" },
		$$inline: true
	});

	var each_value = ctx._savedWords;

	const get_key = ctx => ctx.entry._id;

	for (var i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c: function create() {
			t0 = space();
			h20 = element("h2");
			t1 = text("Word of the Day");
			t2 = space();
			wordcard.$$.fragment.c();
			t3 = space();
			h21 = element("h2");
			t4 = text("My Saved Words");
			t5 = space();

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].c();

			each_1_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\r\n\r\n\r\n\r\n\r\n\r\n");

			h20 = claim_element(nodes, "H2", { class: true }, false);
			var h20_nodes = children(h20);

			t1 = claim_text(h20_nodes, "Word of the Day");
			h20_nodes.forEach(detach);
			t2 = claim_text(nodes, "\r\n");
			wordcard.$$.fragment.l(nodes);
			t3 = claim_text(nodes, "\r\n");

			h21 = claim_element(nodes, "H2", { class: true }, false);
			var h21_nodes = children(h21);

			t4 = claim_text(h21_nodes, "My Saved Words");
			h21_nodes.forEach(detach);
			t5 = claim_text(nodes, "\r\n");

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].l(nodes);

			each_1_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			document.title = "Mien Language - Favorites";
			attr(h20, "class", "top svelte-6glch5");
			add_location(h20, file, 20, 0, 582);
			attr(h21, "class", "svelte-6glch5");
			add_location(h21, file, 22, 0, 668);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, h20, anchor);
			append(h20, t1);
			insert(target, t2, anchor);
			mount_component(wordcard, target, anchor);
			insert(target, t3, anchor);
			insert(target, h21, anchor);
			append(h21, t4);
			insert(target, t5, anchor);

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].m(target, anchor);

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var wordcard_changes = {};
			if (changed._wordOfTheDay) wordcard_changes.entry = ctx._wordOfTheDay;
			wordcard.$set(wordcard_changes);

			const each_value = ctx._savedWords;

			group_outros();
			for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
			each_blocks = update_keyed_each(each_blocks, changed, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, fix_and_outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
			for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
			check_outros();
		},

		i: function intro(local) {
			if (current) return;
			transition_in(wordcard.$$.fragment, local);

			for (var i = 0; i < each_value.length; i += 1) transition_in(each_blocks[i]);

			current = true;
		},

		o: function outro(local) {
			transition_out(wordcard.$$.fragment, local);

			for (i = 0; i < each_blocks.length; i += 1) transition_out(each_blocks[i]);

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(h20);
				detach(t2);
			}

			destroy_component(wordcard, detaching);

			if (detaching) {
				detach(t3);
				detach(h21);
				detach(t5);
			}

			for (i = 0; i < each_blocks.length; i += 1) each_blocks[i].d(detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
  const { savedWords, wordOfTheDay } = favorites;
  let _savedWords = [];
  let _wordOfTheDay;

  onMount(() => savedWords.subscribe(val => { const $$result = _savedWords = val.reverse(); $$invalidate('_savedWords', _savedWords); return $$result; }));
  onMount(() => wordOfTheDay.subscribe(val => { const $$result = _wordOfTheDay = val; $$invalidate('_wordOfTheDay', _wordOfTheDay); return $$result; }));
  // TODO add text for when there are no favorited words

	return { _savedWords, _wordOfTheDay };
}

class Favorites extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Favorites;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGVzLjIxYTNhZDM4LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlL2FuaW1hdGUvaW5kZXgubWpzIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9mYXZvcml0ZXMuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGN1YmljT3V0IH0gZnJvbSAnLi4vZWFzaW5nJztcbmltcG9ydCB7IGlzX2Z1bmN0aW9uIH0gZnJvbSAnLi4vaW50ZXJuYWwnO1xuXG5mdW5jdGlvbiBmbGlwKG5vZGUsIGFuaW1hdGlvbiwgcGFyYW1zKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgY29uc3QgZHggPSBhbmltYXRpb24uZnJvbS5sZWZ0IC0gYW5pbWF0aW9uLnRvLmxlZnQ7XG4gICAgY29uc3QgZHkgPSBhbmltYXRpb24uZnJvbS50b3AgLSBhbmltYXRpb24udG8udG9wO1xuICAgIGNvbnN0IGQgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IGQgPT4gTWF0aC5zcXJ0KGQpICogMTIwLCBlYXNpbmcgPSBjdWJpY091dCB9ID0gcGFyYW1zO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbjogaXNfZnVuY3Rpb24oZHVyYXRpb24pID8gZHVyYXRpb24oZCkgOiBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6IChfdCwgdSkgPT4gYHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke3UgKiBkeH1weCwgJHt1ICogZHl9cHgpO2BcbiAgICB9O1xufVxuXG5leHBvcnQgeyBmbGlwIH07XG4iLCI8c3ZlbHRlOmhlYWQ+XHJcblx0PHRpdGxlPk1pZW4gTGFuZ3VhZ2UgLSBGYXZvcml0ZXM8L3RpdGxlPlxyXG48L3N2ZWx0ZTpoZWFkPlxyXG5cclxuPHNjcmlwdD5cclxuICBpbXBvcnQge29uTW91bnR9IGZyb20gJ3N2ZWx0ZSc7XHJcbiAgaW1wb3J0IHsgZmxpcCB9IGZyb20gJ3N2ZWx0ZS9hbmltYXRlJztcclxuICBpbXBvcnQgV29yZENhcmQgZnJvbSAnLi4vY29tcG9uZW50cy9Xb3JkQ2FyZC5zdmVsdGUnO1xyXG4gIGltcG9ydCB7IGZhdm9yaXRlcyB9IGZyb20gJy4uL3N0b3JlJztcclxuICBjb25zdCB7IHNhdmVkV29yZHMsIHdvcmRPZlRoZURheSB9ID0gZmF2b3JpdGVzO1xyXG4gIGxldCBfc2F2ZWRXb3JkcyA9IFtdO1xyXG4gIGxldCBfd29yZE9mVGhlRGF5O1xyXG5cclxuICBvbk1vdW50KCgpID0+IHNhdmVkV29yZHMuc3Vic2NyaWJlKHZhbCA9PiBfc2F2ZWRXb3JkcyA9IHZhbC5yZXZlcnNlKCkpKTtcclxuICBvbk1vdW50KCgpID0+IHdvcmRPZlRoZURheS5zdWJzY3JpYmUodmFsID0+IF93b3JkT2ZUaGVEYXkgPSB2YWwpKTtcclxuICAvLyBUT0RPIGFkZCB0ZXh0IGZvciB3aGVuIHRoZXJlIGFyZSBubyBmYXZvcml0ZWQgd29yZHNcclxuPC9zY3JpcHQ+XHJcblxyXG5cclxuXHJcbjxoMiBjbGFzcz1cInRvcFwiPldvcmQgb2YgdGhlIERheTwvaDI+XHJcbjxXb3JkQ2FyZCBlbnRyeT17X3dvcmRPZlRoZURheX0gb3Blbj1cInRydWVcIiAvPlxyXG48aDI+TXkgU2F2ZWQgV29yZHM8L2gyPlxyXG57I2VhY2ggX3NhdmVkV29yZHMgYXMgZW50cnksIGkgKGVudHJ5Ll9pZCl9XHJcbiAgPGRpdiBhbmltYXRlOmZsaXA9e3tkdXJhdGlvbjogMjIwfX0+XHJcbiAgICA8V29yZENhcmQge2VudHJ5fSAvPlxyXG4gIDwvZGl2PlxyXG57L2VhY2h9XHJcblxyXG5cclxuXHJcbjxzdHlsZT5cclxuICBoMiB7XHJcbiAgICBtYXJnaW46IDMwcHggMHB4IDE1cHggMHB4O1xyXG4gICAgbWF4LXdpZHRoOiA5NXZ3O1xyXG4gICAgd2lkdGg6IDM2MHB4O1xyXG4gICAgZm9udC1zaXplOiAyNnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogIzU1NTtcclxuICB9XHJcbiAgaDIudG9wIHtcclxuICAgIG1hcmdpbi10b3A6IDVweDtcclxuICB9XHJcbjwvc3R5bGU+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxTQUFTLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRTtJQUNuQyxNQUFNLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxLQUFLLE1BQU0sR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUNwRSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztJQUNuRCxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUNqRCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLFFBQVEsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsTUFBTSxHQUFHLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUNwRixPQUFPO1FBQ0gsS0FBSztRQUNMLFFBQVEsRUFBRSxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVE7UUFDeEQsTUFBTTtRQUNOLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztLQUNqRixDQUFDO0NBQ0w7Ozs7Ozs7Ozs7Ozs7Ozs7OztzQkNTYyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lEQUFMLEtBQUs7Ozs7Ozs7Ozs7Ozs7OztzREFEQyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NCQUhuQixhQUFhOzs7O3NCQUV2QixXQUFXOzs0QkFBYyxLQUFLLENBQUMsR0FBRzs7Z0NBQXZDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBQUE7Ozs7Ozs7OzJEQUZlLGFBQWE7OzswQkFFdkIsV0FBVzs7O21DQUFoQjs7bUNBQUE7Ozs7Ozs7O2tDQUFBOzs7Ozs7OzsrQkFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBQUE7Ozs7Ozs7Ozs7O0VBZEEsTUFBTSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsR0FBRyxTQUFTLENBQUM7RUFDL0MsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDO0VBQ3JCLElBQUksYUFBYSxDQUFDOztFQUVsQixPQUFPLENBQUMsTUFBTSxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsdUJBQUksV0FBVyxHQUFHLEdBQUcsQ0FBQyxPQUFPLGdFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ3hFLE9BQU8sQ0FBQyxNQUFNLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyx1QkFBSSxhQUFhLEdBQUcscUVBQUcsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7OzsifQ==
